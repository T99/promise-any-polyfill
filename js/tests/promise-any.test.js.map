{"version":3,"sources":["ts/tests/promise-any.test.ts"],"names":["getTimedResolvingPromise","msToResolve","resolveValue","Promise","resolve","setTimeout","getTimedRejectingPromise","msToReject","rejectValue","reject","require","test","promises","any","then","result","expect","toBe","fail","iterable"],"mappings":"aAgBA,SAASA,yBAAkCC,EAAqBC,GAE/D,OAAO,IAAIC,QAAYC,IAEtBC,WAAW,IAAMD,EAAQF,GAAeD,KAM1C,SAASK,yBAAkCC,EAAoBC,GAE9D,OAAO,IAAIL,QAAW,CAACC,EACfK,KAEPJ,WAAW,IAAMD,EAAQI,GAAcD,4DAzBzCG,QAAA,qBA+BAC,KAAK,oDAAqD,KAEzD,IAAIC,EAAmC,CACtCZ,yBAAyB,GAAI,OAC7BA,yBAAyB,GAAI,QAC7BA,yBAAyB,GAAI,WAG9BG,QAAQU,IAAYD,GAAUE,KAAMC,IAEnCC,OAAOD,GAAQE,KAAK,WAMtBN,KAAK,8FAA+F,KAEnG,IAAIC,EAAmC,CACtCN,yBAAyB,EAAG,aAC5BN,yBAAyB,GAAI,OAC7BA,yBAAyB,GAAI,WAG9BG,QAAQU,IAAYD,GAAUE,KAAMC,IAEnCC,OAAOD,GAAQE,KAAK,WAMtBN,KAAK,qDAAsD,KAE1D,IAAIC,EAAmC,CACtCN,yBAAyB,EAAG,aAC5BN,yBAAyB,GAAI,OAC7BA,yBAAyB,GAAI,WAG9BG,QAAQU,IAAYD,GAAUE,KAAMC,IAEnCG,KAAK,iFAMPP,KAAK,8EAA+E,KAEnF,IAAIQ,EAAuB,CAC1Bb,yBAAyB,EAAG,aAC5BN,yBAAyB,GAAI,OAC7B,eACAA,yBAAyB,GAAI,WAG9BG,QAAQU,IAAYM,GAAUL,KAAMC,IAEnCC,OAAOD,GAAQE,KAAK","file":"promise-any.test.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t11:46 PM -- October 28th, 2019.\n *\tProject: promise-any-polyfill\n */\n\nimport \"../implementation\";\n\n/**\n * Test cases for the Promise.any functionality implemented by this package.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\n\nfunction getTimedResolvingPromise<T = any>(msToResolve: number, resolveValue?: T): Promise<T> {\n\t\n\treturn new Promise<T>((resolve: (value?: (PromiseLike<T> | T)) => void): void => {\n\t\t\n\t\tsetTimeout(() => resolve(resolveValue), msToResolve);\n\t\t\n\t});\n\t\n}\n\nfunction getTimedRejectingPromise<T = any>(msToReject: number, rejectValue?: T): Promise<T> {\n\n\treturn new Promise<T>((resolve: (value?: (PromiseLike<T> | T)) => void,\n\t\t\t\t\t\t   reject: (reason?: T) => void): void => {\n\n\t\tsetTimeout(() => resolve(rejectValue), msToReject);\n\n\t});\n\n}\n\ntest(\"The first resolving Promise should be acted upon.\", () => {\n\t\n\tlet promises: Array<Promise<string>> = [\n\t\tgetTimedResolvingPromise(20, \"yes\"),\n\t\tgetTimedResolvingPromise(50, \"nope\"),\n\t\tgetTimedResolvingPromise(65, \"nuh-uh\")\n\t];\n\t\n\tPromise.any<string>(promises).then((result: string) => {\n\t\t\n\t\texpect(result).toBe(\"yes\");\n\t\t\n\t});\n\n});\n\ntest(\"Rejecting Promises should not effect the acted-upon value so long as some Promise resolves.\", () => {\n\t\n\tlet promises: Array<Promise<string>> = [\n\t\tgetTimedRejectingPromise(5, \"ignore me\"),\n\t\tgetTimedResolvingPromise(50, \"yes\"),\n\t\tgetTimedResolvingPromise(85, \"nuh-uh\")\n\t];\n\t\n\tPromise.any<string>(promises).then((result: string) => {\n\t\t\n\t\texpect(result).toBe(\"yes\");\n\t\t\n\t});\n\t\n});\n\ntest(\"If all Promises reject, Promise.any should reject.\", () => {\n\t\n\tlet promises: Array<Promise<string>> = [\n\t\tgetTimedRejectingPromise(5, \"ignore me\"),\n\t\tgetTimedResolvingPromise(50, \"yes\"),\n\t\tgetTimedResolvingPromise(85, \"nuh-uh\")\n\t];\n\t\n\tPromise.any<string>(promises).then((result: string) => {\n\t\t\n\t\tfail(\"Promise.any resolved even though none of it's provided Promises resolved.\");\n\t\t\n\t});\n\t\n});\n\ntest(\"Given some non-Promise items, Promise.any should return the first of these.\", () => {\n\t\n\tlet iterable: Array<any> = [\n\t\tgetTimedRejectingPromise(5, \"ignore me\"),\n\t\tgetTimedResolvingPromise(50, \"yes\"),\n\t\t\"Hello there!\",\n\t\tgetTimedResolvingPromise(85, \"nuh-uh\")\n\t];\n\t\n\tPromise.any<string>(iterable).then((result: string) => {\n\t\t\n\t\texpect(result).toBe(\"Hello there!\");\n\t\t\n\t});\n\t\n});"]}