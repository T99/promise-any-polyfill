{"version":3,"sources":["../ts/implementation.ts"],"names":["Promise","any","values","__awaiter","resolve","reject","hasResolved","iterableCount","rejectionReasons","resolveOnce","value","rejectionCheck","reason","push","length","undefined","then","promiseLikeValue","result","catch"],"mappings":"4YAeAA,QAAQC,IAEgEC,GAC1DC,eAAA,OAAA,OAAA,GAAA,YAEb,OAAO,IAAIH,QAAW,CAACI,EAAmDC,KAEzE,IAAIC,GAAuB,EACvBC,EAAwB,EACxBC,EAA0B,GAE9B,MAAMC,EAAyDC,IAEzDJ,IAEJA,GAAc,EACdF,EAAQM,KAMJC,EAAyCC,IAE9CJ,EAAiBK,KAAKD,GAElBJ,EAAiBM,QAAUP,GAAeF,EAAOG,IAItD,IAAK,IAAIE,KAASR,EAIjB,GAFAK,SAE4BQ,IAAvBL,EAAcM,KAAoB,CAEtC,IAAIC,EACHP,EAID,GAFAO,EAAiBD,KAAME,GAAuCT,EAAYS,SAE7CH,IAAxBL,EAAcS,MAAqB,CAEWF,EAErCE,MAAOP,GAAsBD,EAAeC","file":"implementation.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t10:53 PM -- June 11th, 2019.\n *\tProject: promise-any-polyfill\n */\n\nimport { ReturnResultOrPromiseLike, TypeOrPromiseLike } from \"./declaration\";\n\n/**\n * An implementation of the upcoming `Promise.any` functionality.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nPromise.any = async <\n\tT = any,\n\tR extends ReturnResultOrPromiseLike<T> = ReturnResultOrPromiseLike<T>>(values: Iterable<TypeOrPromiseLike<T>>):\n\tPromise<R> => {\n\t\n\treturn new Promise<R>((resolve: (value?: (TypeOrPromiseLike<R>)) => void, reject: (reason?: any) => void): void => {\n\t\t\n\t\tlet hasResolved: boolean = false;\n\t\tlet iterableCount: number = 0;\n\t\tlet rejectionReasons: any[] = [];\n\t\t\n\t\tconst resolveOnce: (value?: (TypeOrPromiseLike<R>)) => void = (value?: (TypeOrPromiseLike<R>)): void => {\n\t\t\t\n\t\t\tif (!hasResolved) {\n\t\t\t\t\n\t\t\t\thasResolved = true;\n\t\t\t\tresolve(value);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t};\n\t\t\n\t\tconst rejectionCheck: (reason: any) => void = (reason: any): void => {\n\t\t\t\n\t\t\trejectionReasons.push(reason);\n\t\t\t\n\t\t\tif (rejectionReasons.length >= iterableCount) reject(rejectionReasons);\n\t\t\t\n\t\t};\n\t\t\n\t\tfor (let value of values) {\n\t\t\t\n\t\t\titerableCount++;\n\t\t\t\n\t\t\tif ((value as any).then !== undefined) {\n\t\t\t\t\n\t\t\t\tlet promiseLikeValue: PromiseLike<TypeOrPromiseLike<R>> =\n\t\t\t\t\tvalue as unknown as PromiseLike<TypeOrPromiseLike<R>>;\n\t\t\t\t\n\t\t\t\tpromiseLikeValue.then((result: TypeOrPromiseLike<R>): void => resolveOnce(result));\n\t\t\t\t\n\t\t\t\tif ((value as any).catch !== undefined) {\n\t\t\t\t\t\n\t\t\t\t\tlet promiseValue: Promise<TypeOrPromiseLike<R>> = promiseLikeValue as Promise<TypeOrPromiseLike<R>>;\n\t\t\t\t\t\n\t\t\t\t\tpromiseValue.catch((reason: any): void => rejectionCheck(reason));\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t});\n\t\n};"]}